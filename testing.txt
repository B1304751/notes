/**
	 * Set the TCA definition associated with ObjectType attribute in a PM collection model from the PM Model instantiator
	 * @param collectorType
	 * @param serviceType
	 * @param family
	 * @param objectTypes
	 * @param threshold
	 * @return
	 */
	@POST
	@Path("/services/{collectorType}/{serviceType}/{family}/objects/attributes/threshold")
	@Consumes(MediaType.APPLICATION_JSON)
	public Response setObjectTypeAttrTCADefinition(@PathParam("collectorType") String collectorType,
			@PathParam("serviceType") String serviceType, @PathParam("family") String family, String objectTypeAttrTCAData) {
	    ResponseMessage message = new ResponseMessage();
	    Model model = m_pmCollectionModelService.getModelByUniqueKey(collectorType, family, serviceType);
	    if (model != null) {
	    	Threshold thresholds = new Threshold();
			if (objectTypeAttrTCAData != null && objectTypeAttrTCAData.length() != 0) {
			    JSONObject jsonData = new JSONObject(objectTypeAttrTCAData);
		        JSONArray objectTypes = jsonData.getJSONArray("objectTypes");
		        String attributes = jsonData.getString("attribute");
		        JSONObject threshold = jsonData.getJSONObject("threshold");
		        
		        thresholds.setName(threshold.getString("name"));
		        thresholds.setValue(threshold.getInt("value"));
		        thresholds.setOperator(threshold.getString("operator"));
		        
		        if (objectTypes != null) {
		        	for (int i = 0; i < objectTypes.length(); i++) {
		        		if (objectTypes.getString(i) != null && thresholds != null && attributes != null ) {
		        			String objectType = objectTypes.getString(i);
		        			m_pmCollectionModelService.setObjectTypeAttrTCADefinition(serviceType, collectorType, objectType, attributes, thresholds);
				        	message.setStatus(MessageConstant.PASS_PREFIX_RESULT);
					        message.setReason("");
		        		}  else {
				        	message.setStatus(MessageConstant.FAIL_PREFIX_RESULT);
				            message.setReason("Null threshold");
				        }
		        	}
		        
		        } else {
		        	message.setStatus(MessageConstant.FAIL_PREFIX_RESULT);
		            message.setReason("Null objecttype");
		        }
		        
			} else {
				message.setStatus(MessageConstant.FAIL_PREFIX_RESULT);
	            message.setReason("Null object body");
			}
	    } else {
	    	message.setStatus(MessageConstant.FAIL_PREFIX_RESULT);
            message.setReason("Null model object");
	    }
		
		
		return Response.ok().entity(message).build();
	}
	
	/**
	 * Get the TCA Alarm definition associated with ObjectType attributes in a PM collection model from the PM Model instantiator
	 * @param collectorType
	 * @param serviceType
	 * @param objectTypes
	 * @param family
	 * @return
	 */
	@GET
	@Path("/services/{collectorType}/{serviceType}/{family}/objects/attributes/threshold")
	@Produces(MediaType.APPLICATION_JSON)
	public Response getObjectTypeAttrTCADefinition(@PathParam("collectorType") String collectorType,
			@PathParam("serviceType") String serviceType, @PathParam("family") String family,
			@MatrixParam("attribute") String attribute, @MatrixParam("ObjectType") String objectType) {
			
			List<ObjectTypeAttrTCADefinitionVO> objectTypeAttrTCADefinitionVOList = new ArrayList();
			List<Threshold> thresholdList = null;
			Model model = m_pmCollectionModelService.getModelByUniqueKey(collectorType, family, serviceType);
			if (model != null) {
			    List<ObjectType> objectTypeList = model.getObjectTypes();
			    for (ObjectType objectTypes : objectTypeList) {
			    	List<ObjectTypeAttrVO> objectTypeAttrVOList = new ArrayList();
			    	String objecTypeName = objectTypes.getObjectTypeFriendlyName();
			    	List<Attribute> attributeList = objectTypes.getAttributes();
			    	// if attribute is optional
			    	if (objectTypes.getObjectTypeName().equals(objectType)) {
			    		String counterName = attribute;
			    		objecTypeName = objectType;
			    		List<ThresholdVO> thresholdVOList = new ArrayList();
			    		if (objecTypeName != null && counterName != null) {
				    		thresholdList = m_pmCollectionModelService.getOjectTypeAttrTCADefinition(serviceType, collectorType, objecTypeName, counterName);
				    		for (Threshold threshold : thresholdList) {
				    			thresholdVOList.add(new ThresholdVO(threshold));
							}
				    		if (thresholdVOList != null) {
				    			objectTypeAttrVOList.add(new ObjectTypeAttrVO(thresholdVOList, counterName));
				    		}
					    } else {
					    	return Response.ok().entity("").build();
					    }
			    		ObjectTypeAttrTCADefinitionVO objectTypeAttrTCADefinitionVO = new ObjectTypeAttrTCADefinitionVO(objecTypeName, objectTypeAttrVOList);
						objectTypeAttrTCADefinitionVOList.add(objectTypeAttrTCADefinitionVO);
						return Response.ok().entity(objectTypeAttrTCADefinitionVOList).build();
			    	} else { // non-optional
			    		for (Attribute attributes : attributeList) {
				    		String counterName = attributes.getName();
				    		List<ThresholdVO> thresholdVOList = new ArrayList();
				    		if (objecTypeName != null && counterName != null) {
					    		thresholdList = m_pmCollectionModelService.getOjectTypeAttrTCADefinition(serviceType, collectorType, objecTypeName, counterName);
					    		for (Threshold threshold : thresholdList) {
					    			thresholdVOList.add(new ThresholdVO(threshold));
								}
					    		if (thresholdVOList != null) {
					    			objectTypeAttrVOList.add(new ObjectTypeAttrVO(thresholdVOList, counterName));
					    		}
						    } else {
						    	return Response.ok().entity("").build();
						    }
				    	}
				    	ObjectTypeAttrTCADefinitionVO objectTypeAttrTCADefinitionVO = new ObjectTypeAttrTCADefinitionVO(objecTypeName, objectTypeAttrVOList);
						objectTypeAttrTCADefinitionVOList.add(objectTypeAttrTCADefinitionVO);
						return Response.ok().entity(objectTypeAttrTCADefinitionVOList).build();
				    }
			    }
 	
			} else {
				return Response.ok().entity("").build();
			}
			return Response.ok().entity(objectTypeAttrTCADefinitionVOList).build();
		}

When we want to get the TCA definition associated with ObjectType attributes in a PM collection model from the PM Model instantiator
API originally defined in the wiki PM - FNMS-7476 - PM Model Instantiation Service : Adaptation, CRUD, multiple models, overlapping models#FNMS-7476-PMModelInstantiationService:Adaptation,CRUD,multiplemodels,overlappingmodels-UserStory6-ProcesstheTCAinformationdefinedinthecollectionmodels
Use the API: getObjectTypeAttrTCADefinition API
We need a REST API for this:
1/ Implement the REST API: 
GET http://<epg server IP@>:8181/rest/pm/collection/models/services/{collectorType}/{serviceType}/{family}/objects/attributes/threshold
Input: 
collectorType, serviceType and family = identifies the model 
collectorType =NCLive/SNMPLive(SNMPLive on NAV returns empty list)
objectType = optional parameter that is a list of object type friendly name prefixes (for example "PON Port" and not "pon") that allows to filter the list of attributes based on object types. If the parameter is omitted, then attributes of all objectTypes in the model are returned with the tca value enabled. 
attribute = optional parameter that allows to filter TCA definition support on an attribute(objectType optional parameter above is mandatory in this case). If the parameter is omitted, then all attributes of ObjectType are returned with the tca value enabled.
This will return :
[{
    "objectType": "<objectTypeFriendlyName1>",// For example, "PON Port"
    "attributes": [{
        "counterName": "counterName1",// For example, "gponPonOltsideOpInfoBiasCurrent"
        "threshold": [{
            "name": "name1",// For example, "hsi_std_isam_sdc_pon_gponPonOltsideOpInfoBiasCurrent"
            "value": "value1",// For example, "10"
            "operator": "operator1"// For example, ">"
        }]
    }]
},
{
    "objectType": "<objectTypeFriendlyName2>",
    "attributes": [{
        "counterName": "counterName3",
        "threshold": [{
            "name": "name3",
            "value": "value3",
            "operator": "operator3"
        }]
    }]},
...
]

When we want to set the TCA definition associated with ObjectType attribute in a PM collection model from the PM Model instantiator(for e.g. TCA Manager)
API originally defined in the wiki PM - FNMS-7476 - PM Model Instantiation Service : Adaptation, CRUD, multiple models, overlapping models#FNMS-7476-PMModelInstantiationService:Adaptation,CRUD,multiplemodels,overlappingmodels-UserStory6-ProcesstheTCAinformationdefinedinthecollectionmodels
Use the API: setObjectTypeAttrTCADefinition API
We need a REST API for this:
1/ Implement the REST API: 
POST http://<epg server IP@>:8181/rest/pm/collection/models/services/{collectorType}/{serviceType}/{family}/objects/attributes/threshold
Input: 
collectorType, serviceType and family = identifies the model 
collectorType =NCLive/SNMPLive(SNMPLive on NAV returns empty list)
objectType = parameter that is a list of object type friendly name prefixes (for example "PON Port" and not "pon") that allows to set the Threshold of attributes based on object types.  
attribute = parameters that allows to set TCA definition support on an attribute. 
threshold = Includes the name, value & operator fields.
This will return :
status
The response would look like this:
"<Status>" // e.g. TCA Set Success/Failure
